package internal

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var testPassword = []byte("test-password")
var testSalt = []byte("test-salt")

var expectedKeyPbkdf = Key{
	key: []byte{0x20, 0xb3, 0xc, 0x92, 0x34, 0xc1, 0x97, 0x8f, 0x33, 0xc, 0xe4, 0x9d, 0x47, 0x23, 0x85, 0x41, 0xe2, 0x2f, 0x5a, 0xcc, 0x77, 0x6f, 0xd5, 0x8f, 0x66, 0x4a, 0x55, 0xf4, 0x70, 0xa4, 0xa5, 0x52},
	iv:  []byte{0xd4, 0x69, 0xa8, 0xde, 0x62, 0xb9, 0x54, 0xab, 0xb, 0x6b, 0x75, 0x9c, 0xae, 0xcc, 0x5, 0x61, 0x4d, 0xaf, 0xeb, 0x12, 0xa1, 0xf0, 0x69, 0xcf},
}
var expectedKeyArgon2id = Key{
	key: []byte{0x78, 0xb3, 0x55, 0x5b, 0x67, 0x9d, 0x02, 0x2f, 0x45, 0x83, 0x4c, 0xb3, 0x0f, 0x05, 0xa4, 0x2e, 0x97, 0xd3, 0x5e, 0x24, 0x75, 0x38, 0x86, 0xea, 0xe2, 0xfb, 0xb6, 0x68, 0x19, 0xe6, 0xc1, 0x82},
	iv:  []byte{0x6a, 0x9d, 0x39, 0x07, 0x32, 0x9c, 0x61, 0x6d, 0x2d, 0xc7, 0x12, 0x74, 0xbd, 0x97, 0x63, 0x29, 0x97, 0x0c, 0x5e, 0x5f, 0x2b, 0x3c, 0x7e, 0xa3},
}
var expectedKeyScrypt = Key{
	key: []byte{0x88, 0xb8, 0x34, 0xf9, 0x94, 0x55, 0x29, 0x54, 0xe2, 0xcc, 0xe3, 0xb6, 0x99, 0x88, 0xa5, 0x6a, 0x23, 0xe6, 0xd6, 0x90, 0x3c, 0x1f, 0x0b, 0x10, 0x48, 0x08, 0xad, 0x45, 0x97, 0xd8, 0x0a, 0x9b},
	iv:  []byte{0xf6, 0x8f, 0x16, 0x99, 0xcb, 0xc1, 0x25, 0x0e, 0xea, 0xe7, 0xdb, 0xc5, 0x61, 0x1a, 0xf2, 0x7f, 0xed, 0x11, 0x27, 0x94, 0xe0, 0xef, 0xcd, 0xab},
}
var expectedKeyHkdf = Key{
	key: []byte{0x01, 0xa8, 0x6d, 0xda, 0xca, 0x16, 0x6f, 0xec, 0x53, 0xc0, 0xd0, 0x68, 0x1c, 0x47, 0x55, 0xcc, 0xdd, 0x89, 0xb5, 0x33, 0xb5, 0x5b, 0x90, 0x1c, 0xa9, 0xa5, 0x67, 0xc2, 0x8d, 0xb2, 0x18, 0xeb},
	iv:  []byte{0xf1, 0x40, 0xfa, 0x01, 0xea, 0xaf, 0xce, 0x6a, 0xce, 0x52, 0xc3, 0xb0, 0x47, 0x0c, 0x15, 0x65, 0xd2, 0xbe, 0xae, 0x7f, 0xd0, 0x41, 0x0e, 0x45},
}

func Test_DeriveKeyPbkdf2(t *testing.T) {
	testKdf(t, DeriveKeyPbkdf, expectedKeyPbkdf)
}

func Test_DeriveKeyArgon2(t *testing.T) {
	testKdf(t, DeriveKeyArgon2id, expectedKeyArgon2id)
}

func Test_DeriveKeyScrypt(t *testing.T) {
	testKdf(t, DeriveKeyScrypt, expectedKeyScrypt)
}

func Test_DeriveKeyHkdf(t *testing.T) {
	testKdf(t, DeriveKeyHkdf, expectedKeyHkdf)
}

func testKdf(t *testing.T, f func(pw []byte, salt []byte) *Key, expected Key) {
	key := f(testPassword, testSalt)

	assert.Len(t, key.key, keyLength)
	assert.Len(t, key.iv, ivLength)

	assert.EqualValues(t, expected.key, key.key)
	assert.EqualValues(t, expected.iv, key.iv)

	key2 := f([]byte("wrong-password"), testSalt)
	assert.NotEqual(t, key.key, key2.key, "different password has to result in a new key")

	key3 := DeriveKeyPbkdf(testPassword, testSalt)
	assert.EqualValues(t, expectedKeyPbkdf.key, key3.key, "always derive the same key with the same inputs")
	assert.EqualValues(t, expectedKeyPbkdf.iv, key3.iv, "always derive the same key with the same inputs")
}
